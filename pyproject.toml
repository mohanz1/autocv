[build-system]
requires = ["hatchling >= 1.27"]
build-backend = "hatchling.build"

[project]
name = "autocv"
version = "1.0"
description = "Computer vision library."
requires-python = ">=3.10"
dependencies = [
    "numpy >=2.2,<3",
    "opencv-python >=4.11,<5",
    "polars >=1.27,<2",
    "pillow >=11.1,<12",
    "pytesseract >=0.3,<1",
    "pywin32 >=310,<311",
    "sv-ttk >=2.6,<3",
    "tesserocr >=2.8.0,<3",
    "typing-extensions >=4.13,<5",
    "nox>=2025.5.1",
]
scripts = { "autocv" = "autocv.cli:main" }

license = "MIT"
readme = "README.md"
authors = [{ name = "Zach <#devzach>" }]
maintainers = [{ name = "devzach", email = "ddev.zach@gmail.com" }]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: Microsoft :: Windows :: Windows 10",
    "Operating System :: Microsoft :: Windows :: Windows 11",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[project.urls]
"Documentation" = "https://mohanz1.github.io/autocv/"
"Source (GitHub)" = "https://github.com/mohanz1/autocv"
"Discord" = "https://discord.gg/Jx4cNGG"
"Issue Tracker" = "https://github.com/mohanz1/autocv/issues"
"CI" = "https://github.com/mohanz1/autocv/actions"

[dependency-groups]
nox = ["nox[uv] >=2025.5.1,<2026"]

audit = ["uv-secure"]
codespell = ["codespell >=2.4.1,<3"]
sphinx = [
    "furo >=2024.8,<2025",
    "sphinx >=8.2,<9; python_version>='3.11'",
    "sphinx-copybutton >=0.5,<1",
]

mypy = ["mypy[faster-cache] >=1.16.0,<2", { include-group = "types" }]
pyright = ["pyright >=1.1.401,<2", { include-group = "types" }]
ruff = ["ruff >=0.11.13,<1"]
types = [
    "types-Pillow >=10.2,<11",
    "types_pywin32 >=310,<311",
]

[tool.uv]
required-version = ">=0.6,<1"

[tool.uv.sources]
tesserocr = [
  { url = "https://github.com/simonflueckiger/tesserocr-windows_build/releases/download/tesserocr-v2.8.0-tesseract-5.5.0/tesserocr-2.8.0-cp310-cp310-win_amd64.whl", marker = "python_version >= '3.10' and python_version < '3.11' and sys_platform == 'win32' and platform_machine == 'AMD64'" },
  { url = "https://github.com/simonflueckiger/tesserocr-windows_build/releases/download/tesserocr-v2.8.0-tesseract-5.5.0/tesserocr-2.8.0-cp310-cp310-win32.whl", marker = "python_version >= '3.10' and python_version < '3.11' and sys_platform == 'win32' and platform_machine == 'x86'" },
  { url = "https://github.com/simonflueckiger/tesserocr-windows_build/releases/download/tesserocr-v2.8.0-tesseract-5.5.0/tesserocr-2.8.0-cp311-cp311-win_amd64.whl",marker = "python_version >= '3.11' and python_version < '3.12' and sys_platform == 'win32' and platform_machine == 'AMD64'" },
  { url = "https://github.com/simonflueckiger/tesserocr-windows_build/releases/download/tesserocr-v2.8.0-tesseract-5.5.0/tesserocr-2.8.0-cp311-cp311-win32.whl", marker = "python_version >= '3.11' and python_version < '3.12' and sys_platform == 'win32' and platform_machine == 'x86'" },
  { url = "https://github.com/simonflueckiger/tesserocr-windows_build/releases/download/tesserocr-v2.8.0-tesseract-5.5.0/tesserocr-2.8.0-cp312-cp312-win_amd64.whl", marker = "python_version >= '3.12' and python_version < '3.13' and sys_platform == 'win32' and platform_machine == 'AMD64'" },
  { url = "https://github.com/simonflueckiger/tesserocr-windows_build/releases/download/tesserocr-v2.8.0-tesseract-5.5.0/tesserocr-2.8.0-cp312-cp312-win32.whl", marker = "python_version >= '3.12' and python_version < '3.13' and sys_platform == 'win32' and platform_machine == 'x86'" },
  { url = "https://github.com/simonflueckiger/tesserocr-windows_build/releases/download/tesserocr-v2.8.0-tesseract-5.5.0/tesserocr-2.8.0-cp313-cp313-win_amd64.whl", marker = "python_version >= '3.13' and python_version < '3.14' and sys_platform == 'win32' and platform_machine == 'AMD64'" },
  { url = "https://github.com/simonflueckiger/tesserocr-windows_build/releases/download/tesserocr-v2.8.0-tesseract-5.5.0/tesserocr-2.8.0-cp313-cp313-win32.whl", marker = "python_version >= '3.13' and python_version < '3.14' and sys_platform == 'win32' and platform_machine == 'x86'" },
]


[tool.ruff]
line-length = 120
target-version = "py310"

[tool.ruff.lint]
# https://docs.astral.sh/ruff/rules/
select = ["ALL"]
ignore = [
    "S101",    # Use of assert detected (we use it for typing and testing purposes)
    "COM812",  # Missing trailing comma (interferes with the formatter)
    "TRY003",  # Avoid specifying long messages outside the exception class (has false positives)
    "D105",    # Missing docstring in magic method
    "SIM105",  # Use `contextlib.suppress` (worst for performance)
    "SIM110",  # Use `any`/`all` (worst for performance)
    "A002",    # Function argument is shadowing a python builtin
    "FBT003",  # Boolean positional argument in function call (more false positives than real ones)
]

[tool.ruff.lint.per-file-ignores]
"autocv/**/__init__.py" = [
    "F401", # Name imported but unused
    "F403", # Unable to detect undefined names when using `import *`
]
"pipelines/**/*.py" = [
    "INP001", # File is part of an implicit namespace
    "D100",   # Missing docstring in public module
]
"docs/**/*.py" = [
    "ALL",
]

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]
force-single-line = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-args = 20

[tool.ruff.lint.mccabe]
max-complexity = 20

[tool.pyright]
include = ["autocv"]
exclude = [
    "test.py",
    "**/__init__.py",
]
pythonVersion = "3.10"
typeCheckingMode = "strict"

reportUnnecessaryTypeIgnoreComment = "error"
reportMissingTypeStubs = "none"
reportImportCycles = "none"                  # Doesn't account for TYPE_CHECKING
reportIncompatibleMethodOverride = "none"    # This relies on ordering for keyword-only arguments
reportOverlappingOverload = "none"           # Type-Vars in last overloads may interfere
reportIncompatibleVariableOverride = "none"  # Cannot overwrite abstract properties using attrs

# Attrs validators will always be unknown
# https://github.com/python-attrs/attrs/issues/795
reportUnknownMemberType = "warning"
reportUntypedFunctionDecorator = "warning"
reportOptionalMemberAccess = "warning"

[tool.pytest.ini_options]
asyncio_mode = "strict"
xfail_strict = true
norecursedirs = [
    "docs",
    "*.egg-info",
    ".git",
    "tasks",
    ".nox",
    ".pytest_cache",
    ".venv",
    "venv",
    "public",
    "ci",
]
# Treat warnings as errors
filterwarnings = [
    "error",
    "ignore:.*assertions not in test modules or plugins will be ignored .*:pytest.PytestConfigWarning",
]

[tool.mypy]
# general settings
strict = true
check_untyped_defs = true
enable_error_code = "explicit-override"
incremental = true
namespace_packages = true
no_implicit_optional = true
pretty = true
python_version = "3.10"
show_column_numbers = true
show_error_codes = true
show_error_context = true

# stuff to allow
allow_untyped_globals = false
allow_redefinition = true

# stuff to disallow
disallow_untyped_decorators = true
disallow_incomplete_defs = true
disallow_untyped_defs = true

# warnings
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = ["tesserocr.*"]
ignore_missing_imports = true