[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "autocv"
version = "1.0.0"
description = "Computer vision library."
authors = ["Zach <Zach#2679>"]
readme = "README.md"


[tool.poetry.dependencies]
python = ">=3.10,<3.14"

numpy                       = "~2.2"
opencv-python               = "~4.10"
polars                      = "~1.19"
pillow                      = "~11.1"
pytesseract                 = "~0.3"
pywin32                     = "~308"
tesserocr = [
    # For Python 3.10 on 64-bit Windows
    { python = "~3.10", url = "https://github.com/simonflueckiger/tesserocr-windows_build/releases/download/tesserocr-v2.7.1-tesseract-5.4.1/tesserocr-2.7.1-cp310-cp310-win_amd64.whl", markers = "sys_platform == 'win32' and platform_machine == 'AMD64'" },
    # For Python 3.10 on 32-bit Windows
    { python = "~3.10", url = "https://github.com/simonflueckiger/tesserocr-windows_build/releases/download/tesserocr-v2.7.1-tesseract-5.4.1/tesserocr-2.7.1-cp310-cp310-win32.whl", markers = "sys_platform == 'win32' and platform_machine == 'x86'" },
    # For Python 3.11 on 64-bit Windows
    { python = "~3.11", url = "https://github.com/simonflueckiger/tesserocr-windows_build/releases/download/tesserocr-v2.7.1-tesseract-5.4.1/tesserocr-2.7.1-cp311-cp311-win_amd64.whl", markers = "sys_platform == 'win32' and platform_machine == 'AMD64'" },
    # For Python 3.11 on 32-bit Windows
    { python = "~3.11", url = "https://github.com/simonflueckiger/tesserocr-windows_build/releases/download/tesserocr-v2.7.1-tesseract-5.4.1/tesserocr-2.7.1-cp311-cp311-win32.whl", markers = "sys_platform == 'win32' and platform_machine == 'x86'" },
    # For Python 3.12 on 64-bit Windows
    { python = "~3.12", url = "https://github.com/simonflueckiger/tesserocr-windows_build/releases/download/tesserocr-v2.7.1-tesseract-5.4.1/tesserocr-2.7.1-cp312-cp312-win_amd64.whl", markers = "sys_platform == 'win32' and platform_machine == 'AMD64'" },
    # For Python 3.12 on 32-bit Windows
    { python = "~3.12", url = "https://github.com/simonflueckiger/tesserocr-windows_build/releases/download/tesserocr-v2.7.1-tesseract-5.4.1/tesserocr-2.7.1-cp312-cp312-win32.whl", markers = "sys_platform == 'win32' and platform_machine == 'x86'" },
    # For Python 3.13 on 64-bit Windows
    { python = "~3.13", url = "https://github.com/simonflueckiger/tesserocr-windows_build/releases/download/tesserocr-v2.7.1-tesseract-5.4.1/tesserocr-2.7.1-cp313-cp313-win_amd64.whl", markers = "sys_platform == 'win32' and platform_machine == 'AMD64'" },
    # For Python 3.13 on 32-bit Windows
    { python = "~3.13", url = "https://github.com/simonflueckiger/tesserocr-windows_build/releases/download/tesserocr-v2.7.1-tesseract-5.4.1/tesserocr-2.7.1-cp313-cp313-win32.whl", markers = "sys_platform == 'win32' and platform_machine == 'x86'" },
]
typing-extensions           = "~4.12"


[tool.poetry.extras]
docs    = ["furo", "sphinx", "sphinx-copybutton"]
lint    = ["mypy", "ruff"]
stubs   = ["opencv-stubs", "pandas-stubs", "types-Pillow", "types_pywin32"]

[tool.poetry.group.dev.dependencies]
mypy                        = "~1.14"
opencv-stubs                = "~0.0"
ruff                        = "~0.8"
types-Pillow                = "~10.2"
types_pywin32               = "~308"


[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
furo                = "~2024.8"
sphinx              = "~8.1"
sphinx-copybutton   = "~0.5"

[tool.ruff]
line-length = 120
target-version = "py310"

[tool.ruff.lint]
ignore-init-module-imports = true
select = [
    "F",  # pyflakes
    "E",  # pycodestyle error
    "W",  # pycodestyle warning
    "C90",  # mccabe
    "I",  # isort
    "N",  # pep8-naming
    "D",  # pydocstyle
    "UP",  # pyupgrade
    "YTT",  # flake8-2020
    "ANN",  # flake8-annotations
    "S",  # flake8-bandit
    "BLE",  # flake8-blind-except
    "FBT",  # flake8-boolean-trap
    "B",  # flake8-bugbear
    "A",  # flake8-builtins
    "C4",  # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "T10",  # flake8-debugger
    "FA",  # flake8-future-annotations
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "G",  # flake8-logging-format
    "INP",  # flake8-no-pep420
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PYI",  # flake8-pyi
    "PT",  # flake8-pytest-style
    "Q",  # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SLOT",  # flake8-slots
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "TCH",  # flake8-type-checking
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "FIX",  # flake8-fixme
    "ERA",  # eradicate
    "PGH",  # pygrep-hooks
    "PL",  # Pylint
    "TRY",  # tryceratops
    "FLY",  # flynt
    "PERF",  # Perflint
    "FURB",  # refurb
    "LOG",  # flake8-logging
    "RUF",  # Ruff-specific rules
]
ignore = [
    "INP001",
    "S311",
    "S101",
    "PLR2004",
    "ANN401",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-positional-args = 7
max-args = 7
max-public-methods = 25

[tool.mypy]
# general settings
strict = true
check_untyped_defs = true
incremental = true
namespace_packages = true
no_implicit_optional = true
pretty = true
python_version = "3.11"
show_column_numbers = true
show_error_codes = true
show_error_context = true

# stuff to allow
allow_untyped_globals = false
allow_redefinition = true

# stuff to disallow
disallow_untyped_decorators = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
untyped_calls_exclude = [
    "win32api"
]

# warnings
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true
exclude = [
    "venv",
    "data",
    "source",
    "test.py",
    "setup.py"
]